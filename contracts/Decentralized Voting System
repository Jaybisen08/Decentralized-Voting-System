// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

/**
 * @title Decentralized Voting System
 * @dev A smart contract for conducting secure, transparent, and tamper-proof elections
 * @author Decentralized Voting System Team
 */
contract Project {
    
    // Structs
    struct Candidate {
        uint256 id;
        string name;
        uint256 voteCount;
        bool exists;
    }
    
    struct Voter {
        bool registered;
        bool hasVoted;
        uint256 votedCandidate;
    }
    
    // State variables
    address public owner;
    string public electionName;
    bool public votingActive;
    uint256 public totalVotes;
    uint256 public candidateCount;
    
    // Mappings
    mapping(uint256 => Candidate) public candidates;
    mapping(address => Voter) public voters;
    
    // Events
    event VoterRegistered(address indexed voter);
    event VoteCasted(address indexed voter, uint256 indexed candidateId);
    event ElectionStarted();
    event ElectionEnded();
    event CandidateAdded(uint256 indexed candidateId, string name);
    
    // Modifiers
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can perform this action");
        _;
    }
    
    modifier onlyDuringVoting() {
        require(votingActive, "Voting is not active");
        _;
    }
    
    modifier onlyBeforeVoting() {
        require(!votingActive, "Cannot perform this action during voting");
        _;
    }
    
    constructor(string memory _electionName) {
        owner = msg.sender;
        electionName = _electionName;
        votingActive = false;
        totalVotes = 0;
        candidateCount = 0;
    }
    
    /**
     * @dev Core Function 1: Register voters for the election
     * @param _voterAddress Address of the voter to register
     */
    function registerVoter(address _voterAddress) external onlyOwner onlyBeforeVoting {
        require(!voters[_voterAddress].registered, "Voter is already registered");
        require(_voterAddress != address(0), "Invalid voter address");
        
        voters[_voterAddress] = Voter({
            registered: true,
            hasVoted: false,
            votedCandidate: 0
        });
        
        emit VoterRegistered(_voterAddress);
    }
    
    /**
     * @dev Core Function 2: Cast a vote for a candidate
     * @param _candidateId ID of the candidate to vote for
     */
    function vote(uint256 _candidateId) external onlyDuringVoting {
        require(voters[msg.sender].registered, "You are not registered to vote");
        require(!voters[msg.sender].hasVoted, "You have already voted");
        require(candidates[_candidateId].exists, "Candidate does not exist");
        
        // Record the vote
        voters[msg.sender].hasVoted = true;
        voters[msg.sender].votedCandidate = _candidateId;
        
        // Update candidate vote count
        candidates[_candidateId].voteCount++;
        totalVotes++;
        
        emit VoteCasted(msg.sender, _candidateId);
    }
    
    /**
     * @dev Core Function 3: Get election results and winner
     * @return winnerName Name of the winning candidate
     * @return winnerVotes Number of votes the winner received
     * @return totalVotesCast Total number of votes cast in the election
     */
    function getResults() external view returns (
        string memory winnerName,
        uint256 winnerVotes,
        uint256 totalVotesCast
    ) {
        require(!votingActive || msg.sender == owner, "Election must be ended to view results");
        
        uint256 winningVoteCount = 0;
        uint256 winnerId = 0;
        
        // Find the candidate with the most votes
        for (uint256 i = 1; i <= candidateCount; i++) {
            if (candidates[i].voteCount > winningVoteCount) {
                winningVoteCount = candidates[i].voteCount;
                winnerId = i;
            }
        }
        
        if (winnerId > 0) {
            return (
                candidates[winnerId].name,
                candidates[winnerId].voteCount,
                totalVotes
            );
        } else {
            return ("No winner", 0, totalVotes);
        }
    }
    
    // Additional utility functions
    
    /**
     * @dev Add a candidate to the election (only before voting starts)
     * @param _name Name of the candidate
     */
    function addCandidate(string memory _name) external onlyOwner onlyBeforeVoting {
        require(bytes(_name).length > 0, "Candidate name cannot be empty");
        
        candidateCount++;
        candidates[candidateCount] = Candidate({
            id: candidateCount,
            name: _name,
            voteCount: 0,
            exists: true
        });
        
        emit CandidateAdded(candidateCount, _name);
    }
    
    /**
     * @dev Start the voting process
     */
    function startVoting() external onlyOwner onlyBeforeVoting {
        require(candidateCount > 0, "At least one candidate must be added");
        votingActive = true;
        emit ElectionStarted();
    }
    
    /**
     * @dev End the voting process
     */
    function endVoting() external onlyOwner onlyDuringVoting {
        votingActive = false;
        emit ElectionEnded();
    }
    
    /**
     * @dev Get candidate information
     * @param _candidateId ID of the candidate
     */
    function getCandidate(uint256 _candidateId) external view returns (
        uint256 id,
        string memory name,
        uint256 voteCount
    ) {
        require(candidates[_candidateId].exists, "Candidate does not exist");
        Candidate memory candidate = candidates[_candidateId];
        return (candidate.id, candidate.name, candidate.voteCount);
    }
    
    /**
     * @dev Check if an address is registered to vote
     * @param _voterAddress Address to check
     */
    function isRegisteredVoter(address _voterAddress) external view returns (bool) {
        return voters[_voterAddress].registered;
    }
    
    /**
     * @dev Check if an address has already voted
     * @param _voterAddress Address to check
     */
    function hasVoted(address _voterAddress) external view returns (bool) {
        return voters[_voterAddress].hasVoted;
    }
}
